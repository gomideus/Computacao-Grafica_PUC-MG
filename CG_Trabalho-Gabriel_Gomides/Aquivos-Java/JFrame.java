/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetocg;

import java.awt.Color;
import java.awt.image.BufferedImage;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import java.io.*;
import java.awt.Desktop;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;

import javax.swing.*;
import java.util.ArrayList; // import the ArrayList class

/**
 *
 * @author Gabriel Gomides
 */
public class JFrame extends javax.swing.JFrame {
    
    String exec = ""; // Para saber qual código será executado.
    int clickNum = 0; // Com essa variável podemos controlar o número de cliques.
    int x1,x2,y1,y2; // Para armazenar coordenadas de clique
    int rgb = new Color(0,0,0).getRGB(); // Cor do objeto/imagem
    File myFile = new File("log.txt"); // Arquivo de logs
    ArrayList<drawableObject> objetos = new ArrayList(); // Lista de desenhos
    
    // Para tempo de execução
    long startMS;
    long endMS;
    

    /**
     * Creates new form NewJFrame
     */
    public JFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        objeto = new projetocg.drawableObject();
        panel1 = new java.awt.Panel();
        label4 = new java.awt.Label();
        jSeparator1 = new javax.swing.JSeparator();
        botaoReset = new javax.swing.JButton();
        botaoDDA = new javax.swing.JButton();
        botaoBRES = new javax.swing.JButton();
        label6 = new java.awt.Label();
        botaoLiang = new javax.swing.JButton();
        botaoCohen = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        botaoCirculo = new javax.swing.JButton();
        resetOption = new java.awt.Button();
        label1 = new java.awt.Label();
        drawLabel = new java.awt.Label();
        label3 = new java.awt.Label();
        xy1 = new java.awt.Label();
        xy2 = new java.awt.Label();
        label7 = new java.awt.Label();
        colorSquare = new javax.swing.JPanel();
        execTime_label = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        label9 = new java.awt.Label();
        ind = new java.awt.Label();
        Painel = new projetocg.ReplacePannel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuChangeColor = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        transButton = new javax.swing.JMenuItem();
        rotButton = new javax.swing.JMenuItem();
        escButton = new javax.swing.JMenuItem();
        refMenu = new javax.swing.JMenu();
        refX = new javax.swing.JMenuItem();
        refY = new javax.swing.JMenuItem();
        refXY = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel1.setBackground(new java.awt.Color(51, 51, 51));

        label4.setAlignment(java.awt.Label.CENTER);
        label4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        label4.setForeground(new java.awt.Color(255, 255, 255));
        label4.setPreferredSize(new java.awt.Dimension(142, 38));
        label4.setText("DESENHAR");

        botaoReset.setText("Resetar Tela");
        botaoReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botaoResetMouseClicked(evt);
            }
        });
        botaoReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoResetActionPerformed(evt);
            }
        });

        botaoDDA.setText("Retas (DDA)");
        botaoDDA.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoDDA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoDDAActionPerformed(evt);
            }
        });

        botaoBRES.setText("Retas (Bresenham)");
        botaoBRES.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoBRES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoBRESActionPerformed(evt);
            }
        });

        label6.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        label6.setForeground(new java.awt.Color(255, 255, 255));
        label6.setText("RECORTAR");

        botaoLiang.setText("Equações Paramétricas");
        botaoLiang.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoLiang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoLiangActionPerformed(evt);
            }
        });

        botaoCohen.setText("Regiões Codificadas");
        botaoCohen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoCohen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCohenActionPerformed(evt);
            }
        });

        jSeparator2.setBackground(new java.awt.Color(153, 153, 153));

        botaoCirculo.setText("Circulo (Bresenham)");
        botaoCirculo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botaoCirculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoCirculoActionPerformed(evt);
            }
        });

        resetOption.setBackground(new java.awt.Color(204, 0, 51));
        resetOption.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        resetOption.setMinimumSize(new java.awt.Dimension(16, 24));
        resetOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetOptionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(botaoCohen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botaoLiang, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(botaoDDA, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botaoBRES, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botaoCirculo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resetOption, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 4, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(botaoReset, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetOption, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoDDA, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoBRES, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoCirculo, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botaoCohen, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoLiang, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botaoReset, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        label1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label1.setText("x1,y1:");

        drawLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        drawLabel.setForeground(new java.awt.Color(0, 153, 51));
        drawLabel.setText("N/A");

        label3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label3.setText("x2,y2:");

        xy1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        xy1.setForeground(new java.awt.Color(204, 0, 0));
        xy1.setText("N/A");

        xy2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        xy2.setForeground(new java.awt.Color(204, 0, 0));
        xy2.setText("N/A");

        label7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label7.setText("Cor:");

        colorSquare.setBackground(new java.awt.Color(0, 0, 0));
        colorSquare.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 51, 51))));
        colorSquare.setAlignmentX(0.0F);
        colorSquare.setAlignmentY(0.0F);
        colorSquare.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        colorSquare.setPreferredSize(new java.awt.Dimension(20, 20));
        colorSquare.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                colorSquareMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout colorSquareLayout = new javax.swing.GroupLayout(colorSquare);
        colorSquare.setLayout(colorSquareLayout);
        colorSquareLayout.setHorizontalGroup(
            colorSquareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );
        colorSquareLayout.setVerticalGroup(
            colorSquareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        execTime_label.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        execTime_label.setForeground(new java.awt.Color(0, 0, 255));
        execTime_label.setText("N/A");

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("LOG.TXT");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        label9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label9.setText("Execution time:");

        ind.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ind.setText("Desenhando: ");

        Painel.setBackground(new java.awt.Color(153, 153, 153));
        Painel.setFocusable(false);
        Painel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PainelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PainelLayout = new javax.swing.GroupLayout(Painel);
        Painel.setLayout(PainelLayout);
        PainelLayout.setHorizontalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );
        PainelLayout.setVerticalGroup(
            PainelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 477, Short.MAX_VALUE)
        );

        jMenu1.setText("Menu");
        jMenu1.setToolTipText("");

        menuChangeColor.setText("Alterar cor");
        menuChangeColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuChangeColorActionPerformed(evt);
            }
        });
        jMenu1.add(menuChangeColor);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("transformar");

        transButton.setText("Translação");
        transButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transButtonActionPerformed(evt);
            }
        });
        jMenu3.add(transButton);

        rotButton.setText("Rotação");
        rotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotButtonActionPerformed(evt);
            }
        });
        jMenu3.add(rotButton);

        escButton.setText("Escala");
        escButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escButtonActionPerformed(evt);
            }
        });
        jMenu3.add(escButton);

        refMenu.setText("Reflexão");

        refX.setText("X");
        refX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refXActionPerformed(evt);
            }
        });
        refMenu.add(refX);

        refY.setText("Y");
        refY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refYActionPerformed(evt);
            }
        });
        refMenu.add(refY);

        refXY.setText("XY");
        refMenu.add(refXY);

        jMenu3.add(refMenu);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Config");

        menuExit.setText("Fechar");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu2.add(menuExit);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xy1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(xy2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(ind, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(drawLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(colorSquare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(jLabel1))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Painel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(execTime_label, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(drawLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(colorSquare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xy1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(xy2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(execTime_label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void setLabelX( int x, int y ){
        if( exec != "" ){
            xy1.setText("("+Integer.toString(x)+","+Integer.toString(y)+")");
        }else{
            xy1.setText("N/A");
        }
    }
    
    public void setLabelX2( int x, int y ){
        if( exec != "" ){
            xy2.setText("("+Integer.toString(x)+","+Integer.toString(y)+")");
        }else{
            xy1.setText("N/A");
        }
    }
    
    public void resetLabelX12( ){
        xy1.setText("N/A");
        xy2.setText("N/A");
    }
    
    private void PainelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PainelMouseClicked
    
        BufferedImage image = Painel.getBuffer();
        Graphics2D g2d = image.createGraphics();
        
        if( exec != "" ){
        
            if( clickNum == 0 ){

                clickNum++;

                // Aqui armazenamos as coordenadas dos pontos x1 e y1
                x1 = evt.getX();
                y1 = evt.getY();
                setLabelX( x1,y1 ); // Para mostrar coordenadas na tela.

                if( exec == "dda" || exec == "bresenham" || exec == "circle" || exec == "cohen" || exec == "liang" ){
                    //BufferedImage image = Tela.getBuffer();
                    image.setRGB((int) Math.round(x1), (int) Math.round(y1), rgb); // Desenhar pixel de origem
                    Painel.update();
                } 

            }else if( clickNum == 1 ){


                // Armazenar coordenadas de cliques x2 e y2
                x2 = evt.getX();
                y2 = evt.getY();
                setLabelX2( x2,y2 ); // Para mostrar coordenadas na tela.
                clickNum = 0; // Resetar contador de cliques

                switch(exec){

                    case "dda":                        
                        objeto.setCoords(x1,x2,y1,y2);
                        objeto.setRGB(rgb);
                        
                        startMS = System.currentTimeMillis();
                        
                        objeto.ddaAlgorithm( image ); // Chamar algoritmo de retas DDA
                        objetos.add(objeto);
                        
                        endMS = System.currentTimeMillis();     
                        execTime_label.setText(endMS-startMS + "ms");

                        Painel.update();

                    break;
                    
                    case "bresenham":
                        objeto.setCoords(x1,x2,y1,y2);
                        objeto.setRGB(rgb);
                        
                        startMS = System.currentTimeMillis();
                        
                        objeto.bresenhamAlgorithm( image ); // Chamar algoritmo de retas Bresenham
                        objetos.add(objeto);
                        
                        endMS = System.currentTimeMillis();     
                        execTime_label.setText(endMS-startMS + "ms");

                        Painel.update();  

                    break;
                    
                    case "circle": 
                        objeto.setCoords(x1,x2,y1,y2);
                        objeto.setRGB(rgb);
                        
                        startMS = System.currentTimeMillis();
                        
                        objeto.bresenhamCircle( image ); // Chamar algoritmo de CIRCUNFERÊNCIA de Bresenham
                        objetos.add(objeto);
                        
                        endMS = System.currentTimeMillis();     
                        execTime_label.setText(endMS-startMS + "ms");
                        
                        Painel.update();

                    break;
                    
                    case "cohen":
                        // Reseta tela
                        Painel.repaint();
                        Painel.cleanDrawable();
                        
                        // Usando Graphics para desenhar o retângulo da área selecionada
                        g2d.drawLine( x1, y2, x1, y1 );
                        g2d.drawLine( x2, y2, x2, y1 );
                        g2d.drawLine( x1, y2, x2, y2 );
                        g2d.drawLine( x1, y1, x2, y1 );
                        
                        
                        // Percorre o vetor de desenhos na tela
                        for (int index = 0; index < objetos.size(); index ++) {   
                            drawableObject aux = objetos.get(index);

                            startMS = System.currentTimeMillis();
                            aux.cohenAlgorithm(x1, x2, y1, y2, image); // executa o algoritmo de recorte

                            endMS = System.currentTimeMillis();     
                            execTime_label.setText(endMS-startMS + "ms");
                        }
                        Painel.update();
                    break;
                    
                    case "liang":
                        // Reseta tela
                        Painel.repaint();
                        Painel.cleanDrawable();

                        // Usando Graphics para desenhar o retângulo da área selecionada
                        g2d.drawLine( x1, y2, x1, y1 );
                        g2d.drawLine( x2, y2, x2, y1 );
                        g2d.drawLine( x1, y2, x2, y2 );
                        g2d.drawLine( x1, y1, x2, y1 );

                        // Percorre o vetor de desenhos na tela
                        for (int index = 0; index < objetos.size(); index ++) {   
                            drawableObject aux = objetos.get(index);

                            startMS = System.currentTimeMillis();

                            aux.liangAlgorithm(x1, y1, x2, y2, image);

                            endMS = System.currentTimeMillis();     
                            execTime_label.setText(endMS-startMS + "ms");
                        }
                        Painel.update();
                    break;
                    
                    default:
                        JOptionPane.showMessageDialog(rootPane, "Selecione um método de desenho.");
                        break;
                }
                
                

                
            }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Nnehum método de desenho foi selecionado.");
        }
        
    }//GEN-LAST:event_PainelMouseClicked

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        int resp = JOptionPane.showConfirmDialog(
            rootPane,
            "Você tem certeza que deseja fechar ?",
            "Mensagem: UI",
            JOptionPane.YES_NO_OPTION);

        if( resp == 0 ){
            super.dispose();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_menuExitActionPerformed

    private void botaoResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoResetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_botaoResetActionPerformed

    private void botaoResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botaoResetMouseClicked

        // Limpar tela
        Painel.cleanDrawable();
        Painel.update();// TODO add your handling code here:
        
        // Resetar label´s de coordenadas
        resetLabelX12();
        execTime_label.setText("N/A"); // Resetar label tempo de execução

        // Percorre o vetor de desenhos na tela
        for (int index = 0; index < objetos.size(); index ++) {   
            objetos.remove(index);
        }
        
        // Informar
        JOptionPane.showMessageDialog(rootPane, "Tela Resetada!");
        
    }//GEN-LAST:event_botaoResetMouseClicked

    private void botaoDDAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoDDAActionPerformed
        ind.setText("Desenhando: ");
        drawLabel.setText("Retas (DDA)");
        exec  = "dda";        // TODO add your handling code here:
    }//GEN-LAST:event_botaoDDAActionPerformed

    private void botaoBRESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoBRESActionPerformed
        ind.setText("Desenhando: ");
        drawLabel.setText("Retas (Bresenham)");
        exec  = "bresenham";    // TODO add your handling code here:
    }//GEN-LAST:event_botaoBRESActionPerformed

    private void alteraCor(){
    
        // Alterador de cores
        Color cor = Color.black;
        cor = JColorChooser.showDialog(rootPane, "Escolha uma cor", cor);

        if( cor == null ){
            cor = Color.black;
        }
        colorSquare.setBackground(cor);
        int newRed =  cor.getRed();
        int newBlue =  cor.getBlue();
        int newGreen =  cor.getGreen();

        rgb = new Color(newRed,newGreen ,newBlue).getRGB();  // Altera a cor do objeto a ser desenhado
        
    }
    
    private void colorSquareMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colorSquareMouseClicked
 
        // Alterar cor
        alteraCor();
    
    }//GEN-LAST:event_colorSquareMouseClicked

    private void menuChangeColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuChangeColorActionPerformed
        // Alterar cor
        alteraCor();
    }//GEN-LAST:event_menuChangeColorActionPerformed

    private void transButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transButtonActionPerformed
        JTextField xconst = new JTextField();
        JTextField yconst = new JTextField();
        Object[] message = {
            "Constante X':", xconst,
            "Constante Y':", yconst
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Translação", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
        
            BufferedImage image = Painel.getBuffer();
            if(objetos.size() == 0){
                JOptionPane.showMessageDialog(rootPane, "Desenhe na tela para transformar!");
            }
            Painel.repaint();
            Painel.cleanDrawable();
            // Percorre o vetor de desenhos na tela
            for (int index = 0; index < objetos.size(); index ++) {   

                drawableObject aux = objetos.get(index);
                aux.setCoords( aux.getX1() + Integer.parseInt(xconst.getText()),
                aux.getX2() + Integer.parseInt(xconst.getText()),
                aux.getY1() + Integer.parseInt(yconst.getText()),
                aux.getY2() + Integer.parseInt(yconst.getText()));

                aux.ddaAlgorithm(image);
                execTime_label.setText("N/A");
            }
            Painel.update();

        }// TODO add your handling code here:
    }//GEN-LAST:event_transButtonActionPerformed

    private void escButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escButtonActionPerformed
        // calculo de escala
        
        JTextField xconst = new JTextField();
        JTextField yconst = new JTextField();
        Object[] message = {
            "Constante X':", xconst,
            "Constante Y':", yconst
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Escala", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            
            BufferedImage image = Painel.getBuffer();

            if(objetos.size() == 0){
                JOptionPane.showMessageDialog(rootPane, "Desenhe na tela para transformar!");
            }
            
            Painel.repaint();
            Painel.cleanDrawable();

            // Percorre o vetor de desenhos na tela
            for (int index = 0; index < objetos.size(); index ++) {   
                drawableObject aux = objetos.get(index);
                int dx = aux.getX2() - aux.getX1();
                int dy = aux.getY2() - aux.getY1();

                int x2_b = (int)(Math.round(dx * Double.parseDouble(xconst.getText())));
                int y2_b = (int)(Math.round(dy * Double.parseDouble(yconst.getText())));

                aux.setCoords( x1, x2_b + x1, y1, y2_b + y1);
                aux.ddaAlgorithm(image);
                execTime_label.setText("N/A");
            }

            Painel.update();
            
        }
        
       
    }//GEN-LAST:event_escButtonActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        
        
        if (Desktop.isDesktopSupported()) {
        try {
            Desktop.getDesktop().open(myFile);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(rootPane, "Arquivo não encontrado");
            // no application registered
        }
}        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void botaoCirculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCirculoActionPerformed
        ind.setText("Desenhando: ");
        drawLabel.setText("Círculo(Bresenham)");
        exec  = "circle";  // TODO add your handling code here:
    }//GEN-LAST:event_botaoCirculoActionPerformed

    private void botaoCohenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoCohenActionPerformed
       ind.setText("Recortando: ");
       drawLabel.setText("Cohen-Sutherland");
       exec  = "cohen";  // TODO add your handling code here:
    }//GEN-LAST:event_botaoCohenActionPerformed

    private void botaoLiangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoLiangActionPerformed
       ind.setText("Recortando: ");
       drawLabel.setText("Liang-Barsky");
       exec  = "liang";  // TODO add your handling code here:
    }//GEN-LAST:event_botaoLiangActionPerformed

    private void resetOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetOptionActionPerformed
        exec = "";
    // Resetar label´s de coordenadas
        resetLabelX12();
        execTime_label.setText("N/A"); // Resetar label tempo de execução
        drawLabel.setText("N/A");
    }//GEN-LAST:event_resetOptionActionPerformed

    private void refXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refXActionPerformed
        // TODO add your handling code here:

        Painel.repaint();
        Painel.cleanDrawable();
    
        BufferedImage image = Painel.getBuffer();
        //Graphics2D g2d = image.createGraphics();

        if(objetos.size() == 0){
            JOptionPane.showMessageDialog(rootPane, "Desenhe na tela para transformar!");
        }
        
            // Percorre o vetor de desenhos na tela
        for (int index = 0; index < objetos.size(); index ++) {   
            drawableObject aux = objetos.get(index);

            x1 = aux.getX1();
            x2 = aux.getX2();
            y1 = aux.getY1();
            y2 = aux.getY2();
        
            int dx = (x2-x1) *-1; // REFLEXÃO
            int dy = (y2-y1);

            int x2_b = dx+x1;
            int y2_b = dy+y1;

            aux.setCoords(x1,x2_b,y1,y2_b);
            aux.ddaAlgorithm(image);

            Painel.update();
            execTime_label.setText("N/A");
        }
    }//GEN-LAST:event_refXActionPerformed

    private void refYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refYActionPerformed
        Painel.repaint();
        Painel.cleanDrawable();
    
        BufferedImage image = Painel.getBuffer();

        if(objetos.size() == 0){
            JOptionPane.showMessageDialog(rootPane, "Desenhe na tela para transformar!");
        }
        
        // Percorre o vetor de desenhos na tela
        for (int index = 0; index < objetos.size(); index ++) {   
            drawableObject aux = objetos.get(index);

            x1 = aux.getX1();
            x2 = aux.getX2();
            y1 = aux.getY1();
            y2 = aux.getY2();
        
            int dx = (x2-x1);
            int dy = (y2-y1)*-1; // REFLEXÃO

            int x2_b = dx+x1;
            int y2_b = dy+y1;

            aux.setCoords(x1,x2_b,y1,y2_b);
            aux.ddaAlgorithm(image);

            Painel.update();
            execTime_label.setText("N/A");
        }
    }//GEN-LAST:event_refYActionPerformed

    private void rotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotButtonActionPerformed
        JTextField const_ = new JTextField();
        Object[] message = {
            "Graus de rotação:", const_
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Rotação", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            
        int grau = Integer.parseInt(const_.getText());
        double sen = Math.sin(grau);
        double cos = Math.cos(grau);

        BufferedImage image = Painel.getBuffer();

        Painel.repaint();
        Painel.cleanDrawable();

        if(objetos.size() == 0){
            JOptionPane.showMessageDialog(rootPane, "Desenhe na tela para transformar!");
        }

            // Percorre o vetor de desenhos na tela
        for (int index = 0; index < objetos.size(); index ++) {   
            drawableObject aux = objetos.get(index);

            x1 = aux.getX1();
            x2 = aux.getX2();
            y1 = aux.getY1();
            y2 = aux.getY2();
        
            int dx = (x2-x1);
            int dy = (y2-y1);

            int x2_b =(int)(dx*cos - dy*sen) ;
            int y2_b = (int)(dx*sen + dy*cos);

            aux.setCoords(x1,x2_b+x1,y1,y2_b+y1);
            aux.ddaAlgorithm(image);

            Painel.update();
            execTime_label.setText("N/A");
        }

        }// TODO add your handling code here:
    }//GEN-LAST:event_rotButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private projetocg.ReplacePannel Painel;
    private javax.swing.JButton botaoBRES;
    private javax.swing.JButton botaoCirculo;
    private javax.swing.JButton botaoCohen;
    private javax.swing.JButton botaoDDA;
    private javax.swing.JButton botaoLiang;
    private javax.swing.JButton botaoReset;
    private javax.swing.JPanel colorSquare;
    private java.awt.Label drawLabel;
    private javax.swing.JMenuItem escButton;
    private java.awt.Label execTime_label;
    private java.awt.Label ind;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private java.awt.Label label1;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label9;
    private javax.swing.JMenuItem menuChangeColor;
    private javax.swing.JMenuItem menuExit;
    public projetocg.drawableObject objeto;
    private java.awt.Panel panel1;
    private javax.swing.JMenu refMenu;
    private javax.swing.JMenuItem refX;
    private javax.swing.JMenuItem refXY;
    private javax.swing.JMenuItem refY;
    private java.awt.Button resetOption;
    private javax.swing.JMenuItem rotButton;
    private javax.swing.JMenuItem transButton;
    private java.awt.Label xy1;
    private java.awt.Label xy2;
    // End of variables declaration//GEN-END:variables
}
